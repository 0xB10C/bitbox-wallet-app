// Code generated by mockery v1.0.0
package mocks

import chainhash "github.com/btcsuite/btcd/chaincfg/chainhash"
import client "github.com/shiftdevices/godbb/electrum/client"

import mock "github.com/stretchr/testify/mock"
import wire "github.com/btcsuite/btcd/wire"

// BlockchainInterface is an autogenerated mock type for the BlockchainInterface type
type BlockchainInterface struct {
	mock.Mock
}

// AddressGetHistory provides a mock function with given fields: _a0, _a1, _a2
func (_m *BlockchainInterface) AddressGetHistory(_a0 string, _a1 func([]*client.TX) error, _a2 func(error)) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func([]*client.TX) error, func(error)) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddressListUnspent provides a mock function with given fields: address
func (_m *BlockchainInterface) AddressListUnspent(address string) ([]*client.UTXO, error) {
	ret := _m.Called(address)

	var r0 []*client.UTXO
	if rf, ok := ret.Get(0).(func(string) []*client.UTXO); ok {
		r0 = rf(address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.UTXO)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressSubscribe provides a mock function with given fields: _a0, _a1, _a2
func (_m *BlockchainInterface) AddressSubscribe(_a0 string, _a1 func(string) error, _a2 func(error)) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string) error, func(error)) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HeadersSubscribe provides a mock function with given fields:
func (_m *BlockchainInterface) HeadersSubscribe() (*client.Header, error) {
	ret := _m.Called()

	var r0 *client.Header
	if rf, ok := ret.Get(0).(func() *client.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Header)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionGet provides a mock function with given fields: _a0, _a1, _a2
func (_m *BlockchainInterface) TransactionGet(_a0 chainhash.Hash, _a1 func(*wire.MsgTx) error, _a2 func(error)) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(chainhash.Hash, func(*wire.MsgTx) error, func(error)) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
