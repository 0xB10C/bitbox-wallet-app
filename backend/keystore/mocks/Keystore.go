// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import coin "github.com/digitalbitbox/bitbox-wallet-app/backend/coins/coin"
import hdkeychain "github.com/btcsuite/btcutil/hdkeychain"

import mock "github.com/stretchr/testify/mock"
import signing "github.com/digitalbitbox/bitbox-wallet-app/backend/signing"

// Keystore is an autogenerated mock type for the Keystore type
type Keystore struct {
	mock.Mock
}

// CosignerIndex provides a mock function with given fields:
func (_m *Keystore) CosignerIndex() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ExtendedPublicKey provides a mock function with given fields: _a0
func (_m *Keystore) ExtendedPublicKey(_a0 signing.AbsoluteKeypath) (*hdkeychain.ExtendedKey, error) {
	ret := _m.Called(_a0)

	var r0 *hdkeychain.ExtendedKey
	if rf, ok := ret.Get(0).(func(signing.AbsoluteKeypath) *hdkeychain.ExtendedKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hdkeychain.ExtendedKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(signing.AbsoluteKeypath) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasSecureOutput provides a mock function with given fields:
func (_m *Keystore) HasSecureOutput() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OutputAddress provides a mock function with given fields: _a0, _a1, _a2
func (_m *Keystore) OutputAddress(_a0 signing.AbsoluteKeypath, _a1 signing.ScriptType, _a2 coin.Coin) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(signing.AbsoluteKeypath, signing.ScriptType, coin.Coin) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SignTransaction provides a mock function with given fields: _a0
func (_m *Keystore) SignTransaction(_a0 coin.ProposedTransaction) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(coin.ProposedTransaction) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
